{"version":3,"sources":["components/about/logo.svg","components/qrcode.jsx","components/about/about.jsx","route/route.jsx","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","QrCode","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","delay","result","handleScan","bind","assertThisInitialized","data","setState","err","console","error","react_default","a","createElement","lib_default","onError","handleError","onScan","style","width","Component","About","className","src","logo","alt","Link","to","Router","BrowserRouter","Switch","Route","path","exact","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","log","onUpdate","onSuccess","catch","ReactDOM","render","route","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e9011395.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nclass QrCode extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      delay: 300,\r\n      result: \"No result\"\r\n    };\r\n    this.handleScan = this.handleScan.bind(this);\r\n  }\r\n\r\n  handleScan(data) {\r\n    if (data) {\r\n      this.setState({\r\n        result: data\r\n      });\r\n    }\r\n  }\r\n\r\n  handleError(err) {\r\n    console.error(err);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n        <p>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QrCode;\r\n","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\n\r\nimport logo from './logo.svg';\r\nimport './about.css';\r\n\r\nclass About extends Component {\r\n   render() {\r\n      return (\r\n         <div className='App'>\r\n            <header className='App-header'>\r\n               <img src={logo} className='App-logo' alt='logo' />\r\n               <h1 className='App-title'>Página de Sobre</h1>\r\n            </header>\r\n            <Link to=\"/qrcode\">Ir para a página sobre \\o/</Link>\r\n            <p className='App-intro'>\r\n               Exemplo de Página Sobre :)\r\n            </p>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default About;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport QrCode from '../components/qrcode'\r\nimport About from '../components/about/about'\r\n\r\nclass Router extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/\" exact={true} component={About} />\r\n                <Route path=\"/qrcode\" component={QrCode} />\r\n                <Route path='*' component={About} />\r\n            </Switch>\r\n        </ BrowserRouter>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Router;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Router from './route/route';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}