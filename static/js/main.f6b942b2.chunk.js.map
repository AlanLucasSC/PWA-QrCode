{"version":3,"sources":["serviceWorker.js","components/qrcode.jsx","utils/firebaseUtils.js","components/about/about.jsx","services/firebaseService.js","components/listTest/index.jsx","route/route.jsx","index.js","components/about/logo.svg"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","QrCode","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","delay","result","handleScan","bind","assertThisInitialized","data","setState","err","react_default","a","createElement","lib_default","onError","handleError","onScan","style","width","Component","firebaseDatabase","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","database","About","pushData","node","objToSubmit","ref","push","id","key","set","remove","_this2","className","src","logo","alt","Link","to","type","onClick","history","FirebaseService","getDataList","nodePath","callback","size","arguments","length","undefined","query","limitToLast","on","dataSnapshot","items","forEach","childSnapshot","item","val","ListUser","getUsers","dataReceived","map","index","name","Router","BrowserRouter","Switch","Route","path","exact","component","ReactDOM","render","route","document","getElementById","URL","process","href","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","module","exports","__webpack_require__","p"],"mappings":"4JAYMA,SAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,4DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,KAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,gHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,UAO5BW,MAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,mGCxDlDC,cApCb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDT,MAAQ,CACXiB,MAAO,IACPC,OAAQ,aAEVR,EAAKS,WAAaT,EAAKS,WAAWC,KAAhBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KANDA,0EASRY,GACLA,GACFT,KAAKU,SAAS,CACZL,OAAQI,wCAKFE,GACVtB,QAAQK,MAAMiB,oCAId,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CACET,MAAOJ,KAAKb,MAAMiB,MAClBY,QAAShB,KAAKiB,YACdC,OAAQlB,KAAKM,WACba,MAAO,CAAEC,MAAO,UAElBR,EAAAC,EAAAC,cAAA,SAAId,KAAKb,MAAMkB,gBA/BFgB,uCCSRC,GADeC,IAASC,cATtB,CACXC,OAAQ,0CACRC,WAAY,kCACZC,YAAa,yCACbC,UAAW,kBACXC,cAAe,GACfC,kBAAmB,iBAISP,IAASQ,6BC0C1BC,sBA/CZ,SAAAA,EAAYpC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAgC,IACfnC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAkC,GAAA7B,KAAAH,KAAMJ,KAYTqC,SAAW,SAACC,EAAMC,GACf,IAAMC,EAAMd,EAAiBc,IAAIF,GAAMG,OACjCC,EAAKhB,EAAiBc,IAAIF,GAAMG,OAAOE,IAE7C,OADAH,EAAII,IAAIL,GACDG,GAjBQzC,EAoBlB4C,OAAS,SAACH,EAAIJ,GACX,OAAOZ,EAAiBc,IAAIF,EAAO,IAAMI,GAAIG,UAnB7C5C,EAAKoC,SAAWpC,EAAKoC,SAAS1B,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAChBA,EAAK4C,OAAS5C,EAAK4C,OAAOlC,KAAZT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAHCA,wEAwBT,IAAA6C,EAAA1C,KACN,OACGY,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACZ/B,EAAAC,EAAAC,cAAA,UAAQ6B,UAAU,cACf/B,EAAAC,EAAAC,cAAA,OAAK8B,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzClC,EAAAC,EAAAC,cAAA,MAAI6B,UAAU,aAAd,sBACA/B,EAAAC,EAAAC,cAAA,MAAI6B,UAAU,aAAd,8DACA/B,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMC,GAAG,sBAAT,kCACApC,EAAAC,EAAAC,cAACiC,EAAA,EAAD,CAAMC,GAAG,oBAAT,qBACApC,EAAAC,EAAAC,cAAA,UACGmC,KAAK,SACLC,QAAS,WAENR,EAAK9C,MAAMuD,QAAQd,KAAK,sBAJ9B,8BAlCKhB,cCJC+B,sCACVC,YAAc,SAACC,EAAUC,GAAwB,IAAdC,EAAcC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAP,GAEzCG,EAAQtC,EAAiBc,IAAIkB,GAAUO,YAAYL,GAWvD,OAVAI,EAAME,GAAG,QAAS,SAAAC,GACd,IAAIC,EAAQ,GACZD,EAAaE,QAAQ,SAAAC,GACjB,IAAIC,EAAOD,EAAcE,MACzBD,EAAI,IAAUD,EAAc3B,IAC5ByB,EAAM3B,KAAK8B,KAEfZ,EAASS,KAGNJ,OCkBCS,cA9BZ,SAAAA,EAAYzE,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqE,IACfxE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuE,GAAAlE,KAAAH,KAAMJ,KACDT,MAAQ,CACTsB,KAAM,IAEVZ,EAAKyE,SAAWzE,EAAKyE,SAAS/D,KAAdT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAEhBA,EAAKyE,WAPUzE,0EAUP,IAAA6C,EAAA1C,KACPoD,EAAgBC,YAAY,QAAS,SAACkB,GAAD,OAAkB7B,EAAKhC,SAAS,CAACD,KAAM8D,uCAI5E,OACI3D,EAAAC,EAAAC,cAAA,OAAK6B,UAAU,OACX/B,EAAAC,EAAAC,cAAA,UAAQ6B,UAAU,cACd/B,EAAAC,EAAAC,cAAA,UAEQd,KAAKb,MAAMsB,KAAK+D,IAAI,SAACL,EAAMM,GAAP,OAAiB7D,EAAAC,EAAAC,cAAA,UAC/BqD,EAAKO,kBAtBhBrD,aCqBRsD,mLAdX,OACI/D,EAAAC,EAAAC,cAAC8D,EAAA,EAAD,KACIhE,EAAAC,EAAAC,cAAC+D,EAAA,EAAD,KACIjE,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,KAAK,eAAeC,OAAO,EAAMC,UAAWjD,IACnDpB,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,KAAK,qBAAqBE,UAAWtF,IAC5CiB,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,KAAK,mBAAmBE,UAAWZ,IAC1CzD,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAOC,KAAK,IAAIE,UAAWjD,aATtBX,aCArB6D,IAASC,OAAOvE,EAAAC,EAAAC,cAACsE,EAAD,MAAYC,SAASC,eAAe,SPe7C,SAAkB7G,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI6G,IAAIC,cAAwBrH,OAAOC,SAASqH,MACpDC,SAAWvH,OAAOC,SAASsH,OAIvC,OAGFvH,OAAOwH,iBAAiB,OAAQ,WAC9B,IAAMnH,EAAK,GAAAoH,OAAMJ,cAAN,sBAEPvH,GAgEV,SAAiCO,EAAOC,GAEtCoH,MAAMrH,GACHK,KAAK,SAAAiH,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CzH,UAAUC,cAAcyH,MAAMvH,KAAK,SAAAC,GACjCA,EAAauH,aAAaxH,KAAK,WAC7BV,OAAOC,SAASkI,aAKpB/H,EAAgBC,EAAOC,KAG1BgB,MAAM,WACLJ,QAAQC,IACN,mEArFAiH,CAAwB/H,EAAOC,GAI/BC,UAAUC,cAAcyH,MAAMvH,KAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,MOzC/BE,uBCTA6H,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.f6b942b2.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport QrReader from \"react-qr-reader\";\r\n\r\nclass QrCode extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      delay: 300,\r\n      result: \"No result\"\r\n    };\r\n    this.handleScan = this.handleScan.bind(this);\r\n  }\r\n\r\n  handleScan(data) {\r\n    if (data) {\r\n      this.setState({\r\n        result: data\r\n      });\r\n    }\r\n  }\r\n\r\n  handleError(err) {\r\n    console.error(err);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <QrReader\r\n          delay={this.state.delay}\r\n          onError={this.handleError}\r\n          onScan={this.handleScan}\r\n          style={{ width: \"100%\" }}\r\n        />\r\n        <p>{this.state.result}</p>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QrCode;\r\n","import firebase from 'firebase';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyAf2JprBIZJW97Ef6mVwQGWgWLlzymJBLc\",\r\n    authDomain: \"plusevent-d204d.firebaseapp.com\",\r\n    databaseURL: \"https://plusevent-d204d.firebaseio.com\",\r\n    projectId: \"plusevent-d204d\",\r\n    storageBucket: \"\",\r\n    messagingSenderId: \"631436429012\"\r\n};\r\n\r\nexport const firebaseImpl = firebase.initializeApp(config);\r\nexport const firebaseDatabase = firebase.database();","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { firebaseDatabase } from '../../utils/firebaseUtils'\r\nimport logo from './logo.svg';\r\nimport './about.css';\r\n\r\nclass About extends Component {\r\n   constructor(props){\r\n      super(props)\r\n      this.pushData = this.pushData.bind(this)\r\n      this.remove = this.remove.bind(this)\r\n      /*\r\n      this.pushData('users', {\r\n         name: 'alan',\r\n         password: '68745985'\r\n      })\r\n      this.remove('-LYn-EB4LBXg-9I0YslU', 'users')\r\n      */\r\n   }\r\n\r\n   pushData = (node, objToSubmit) => {\r\n      const ref = firebaseDatabase.ref(node).push();\r\n      const id = firebaseDatabase.ref(node).push().key;\r\n      ref.set(objToSubmit);\r\n      return id;\r\n  };\r\n\r\n   remove = (id, node) => {\r\n      return firebaseDatabase.ref(node + '/' + id).remove();\r\n   };\r\n\r\n   render() {\r\n      return (\r\n         <div className='App'>\r\n            <header className='App-header'>\r\n               <img src={logo} className='App-logo' alt='logo' />\r\n               <h1 className='App-title'>Página de Sobre</h1>\r\n               <h2 className='App-title'> Link do github https://github.com/AlanLucasSC/PWA-QrCode </h2>\r\n               <Link to=\"/PWA-QrCode/qrcode\">Ir para a página sobre \\o/</Link>\r\n               <Link to=\"/PWA-QrCode/list\">Lista de usuarios</Link>\r\n               <button\r\n                  type='button'\r\n                  onClick={() => {\r\n                     // context.history.push === history.push\r\n                     this.props.history.push('/PWA-QrCode/list')\r\n                  }}\r\n               >\r\n                  Lista de usuarios\r\n               </button>\r\n            </header>\r\n         </div>\r\n      );\r\n   }\r\n}\r\nexport default About;","import {firebaseDatabase} from '../utils/firebaseUtils'\r\n\r\nexport default class FirebaseService {\r\n    static getDataList = (nodePath, callback, size = 10) => {\r\n\r\n        let query = firebaseDatabase.ref(nodePath).limitToLast(size)\r\n        query.on('value', dataSnapshot => {\r\n            let items = []\r\n            dataSnapshot.forEach(childSnapshot => {\r\n                let item = childSnapshot.val()\r\n                item['key'] = childSnapshot.key\r\n                items.push(item)\r\n            });\r\n            callback(items)\r\n        });\r\n\r\n        return query\r\n    };\r\n\r\n}","import React, {Component} from 'react'\r\nimport FirebaseService from '../../services/firebaseService'\r\n\r\nclass ListUser extends Component {\r\n    constructor(props){\r\n       super(props)\r\n       this.state = {\r\n           data: []\r\n       }\r\n       this.getUsers = this.getUsers.bind(this)\r\n\r\n       this.getUsers()\r\n    }\r\n\r\n    getUsers() {\r\n        FirebaseService.getDataList('users', (dataReceived) => this.setState({data: dataReceived}))\r\n    }\r\n \r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <header className='App-header'>\r\n                    <ul>\r\n                        {\r\n                            this.state.data.map((item, index) => <li>\r\n                                { item.name }\r\n                            </li>)\r\n                        }\r\n                    </ul>\r\n                </header>\r\n            </div>\r\n        );\r\n    }\r\n }\r\n export default ListUser;","import React, { Component } from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom'\r\n\r\nimport QrCode from '../components/qrcode'\r\nimport About from '../components/about/about'\r\nimport ListUser from '../components/listTest'\r\n\r\nclass Router extends Component {\r\n\r\n  render() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/PWA-QrCode/\" exact={true} component={About} />\r\n                <Route path=\"/PWA-QrCode/qrcode\" component={QrCode} />\r\n                <Route path=\"/PWA-QrCode/list\" component={ListUser} />\r\n                <Route path='*' component={About} />\r\n            </Switch>\r\n        </ BrowserRouter>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default Router;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport Router from './route/route';\n\nReactDOM.render(<Router />, document.getElementById('root'));\n\nserviceWorker.register();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}